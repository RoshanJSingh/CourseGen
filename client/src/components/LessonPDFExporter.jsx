import React from 'react';
import {
  Box,
  Button,
  VStack,
  HStack,
  Text,
  Heading,
  Code,
  OrderedList,
  UnorderedList,
  ListItem,
  Badge,
  Divider,
  useToast
} from '@chakra-ui/react';
import { FiDownload } from 'react-icons/fi';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

const LessonPDFExporter = ({ lesson, course, onExport }) => {
  const toast = useToast();

  const exportToPDF = async () => {
    try {
      toast({
        title: 'Generating PDF',
        description: 'Please wait while we create your lesson PDF...',
        status: 'info',
        duration: 2000,
        isClosable: true,
      });

      // Create a temporary div for PDF content
      const printContent = document.createElement('div');
      printContent.style.width = '210mm'; // A4 width
      printContent.style.padding = '20mm';
      printContent.style.fontFamily = 'Arial, sans-serif';
      printContent.style.fontSize = '12px';
      printContent.style.lineHeight = '1.6';
      printContent.style.color = '#333';
      printContent.style.backgroundColor = 'white';
      
      // Add content to the temporary div
      printContent.innerHTML = generateHTMLContent(lesson, course);
      
      // Temporarily add to DOM
      document.body.appendChild(printContent);

      // Convert to canvas
      const canvas = await html2canvas(printContent, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });

      // Remove temporary div
      document.body.removeChild(printContent);

      // Create PDF
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      
      const imgWidth = 210; // A4 width in mm
      const pageHeight = 297; // A4 height in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;

      // Add first page
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      // Add additional pages if needed
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      // Save the PDF
      const fileName = `${course?.title || 'Course'} - ${lesson?.title || 'Lesson'}.pdf`;
      pdf.save(fileName);

      toast({
        title: 'PDF Generated Successfully',
        description: 'Your lesson has been exported as a PDF.',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });

      // Call callback if provided
      if (onExport) {
        onExport({ success: true, fileName });
      }

    } catch (error) {
      console.error('Error generating PDF:', error);
      toast({
        title: 'PDF Export Failed',
        description: 'Unable to generate PDF. Please try again.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });

      if (onExport) {
        onExport({ success: false, error: error.message });
      }
    }
  };

  const generateHTMLContent = (lesson, course) => {
    let html = `
      <div style="margin-bottom: 30px; border-bottom: 2px solid #3182ce; padding-bottom: 20px;">
        <h1 style="color: #2d3748; font-size: 28px; margin-bottom: 10px;">${lesson?.title || 'Untitled Lesson'}</h1>
        <p style="color: #718096; font-size: 16px; margin-bottom: 10px;">Course: ${course?.title || 'Unknown Course'}</p>
        <p style="color: #718096; font-size: 14px;">Generated on: ${new Date().toLocaleDateString()}</p>
      </div>
    `;

    if (lesson?.description) {
      html += `
        <div style="margin-bottom: 25px;">
          <h2 style="color: #2d3748; font-size: 20px; margin-bottom: 10px;">Description</h2>
          <p style="color: #4a5568; line-height: 1.8;">${lesson.description}</p>
        </div>
      `;
    }

    // Process content blocks
    if (lesson?.content && lesson.content.length > 0) {
      html += '<div style="margin-bottom: 25px;"><h2 style="color: #2d3748; font-size: 20px; margin-bottom: 15px;">Content</h2>';
      
      lesson.content.forEach((block, index) => {
        html += generateBlockHTML(block, index);
      });
      
      html += '</div>';
    }

    // Add footer
    html += `
      <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e2e8f0; text-align: center;">
        <p style="color: #a0aec0; font-size: 12px;">
          Generated by Text-to-Learn: AI-Powered Course Generator
        </p>
      </div>
    `;

    return html;
  };

  const generateBlockHTML = (block, index) => {
    const blockNumber = index + 1;
    let html = `<div style="margin-bottom: 20px; page-break-inside: avoid;">`;

    switch (block.type) {
      case 'heading':
        const level = block.level || 2;
        const fontSize = level === 1 ? '24px' : level === 2 ? '20px' : '18px';
        html += `<h${level + 1} style="color: #2d3748; font-size: ${fontSize}; margin-bottom: 10px;">${block.content || block.text}</h${level + 1}>`;
        break;

      case 'paragraph':
        html += `<p style="color: #4a5568; line-height: 1.8; margin-bottom: 15px;">${block.content || block.text}</p>`;
        break;

      case 'code':
        html += `
          <div style="background-color: #f7fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 15px; margin-bottom: 15px;">
            <div style="color: #718096; font-size: 12px; margin-bottom: 8px;">
              ${block.language ? `Language: ${block.language}` : 'Code Block'}
            </div>
            <pre style="margin: 0; font-family: 'Courier New', monospace; font-size: 11px; line-height: 1.4; white-space: pre-wrap; color: #2d3748;">${block.code || block.content}</pre>
          </div>
        `;
        break;

      case 'list':
        const listItems = (block.items || []).map(item => {
          const itemText = typeof item === 'string' ? item : item.text || item.content;
          return `<li style="margin-bottom: 5px; color: #4a5568;">${itemText}</li>`;
        }).join('');
        
        const listTag = block.type === 'ordered' || block.numbered ? 'ol' : 'ul';
        html += `
          <div style="margin-bottom: 15px;">
            ${block.title ? `<h4 style="color: #2d3748; font-size: 16px; margin-bottom: 8px;">${block.title}</h4>` : ''}
            <${listTag} style="margin-left: 20px; color: #4a5568;">${listItems}</${listTag}>
          </div>
        `;
        break;

      case 'mcq':
        html += `
          <div style="background-color: #ebf8ff; border: 1px solid #bee3f8; border-radius: 6px; padding: 15px; margin-bottom: 15px;">
            <h4 style="color: #2b6cb0; font-size: 16px; margin-bottom: 10px;">Quiz Question</h4>
            <p style="color: #2d3748; font-weight: 600; margin-bottom: 12px;">${block.question}</p>
            <div style="margin-bottom: 12px;">
              ${(block.options || []).map((option, i) => `
                <div style="margin-bottom: 6px; color: #4a5568;">
                  ${String.fromCharCode(65 + i)}. ${option}
                </div>
              `).join('')}
            </div>
            <div style="color: #38a169; font-size: 12px;">
              <strong>Correct Answer(s):</strong> ${(block.correctAnswers || []).map(i => String.fromCharCode(65 + i)).join(', ')}
            </div>
            ${block.explanation ? `<div style="color: #4a5568; font-size: 12px; margin-top: 8px;"><strong>Explanation:</strong> ${block.explanation}</div>` : ''}
          </div>
        `;
        break;

      case 'video':
        html += `
          <div style="background-color: #f0fff4; border: 1px solid #c6f6d5; border-radius: 6px; padding: 15px; margin-bottom: 15px;">
            <h4 style="color: #2f855a; font-size: 16px; margin-bottom: 8px;">Video Content</h4>
            <p style="color: #2d3748; margin-bottom: 8px;"><strong>Title:</strong> ${block.title || 'Video'}</p>
            ${block.description ? `<p style="color: #4a5568; margin-bottom: 8px;">${block.description}</p>` : ''}
            ${block.videoUrl ? `<p style="color: #4a5568; font-size: 12px;">URL: ${block.videoUrl}</p>` : ''}
            ${block.notes ? `<p style="color: #4a5568; font-size: 12px; font-style: italic;">Notes: ${block.notes}</p>` : ''}
          </div>
        `;
        break;

      case 'image':
        html += `
          <div style="background-color: #fffbf0; border: 1px solid #fed7aa; border-radius: 6px; padding: 15px; margin-bottom: 15px; text-align: center;">
            <h4 style="color: #c05621; font-size: 16px; margin-bottom: 8px;">Image</h4>
            ${block.title ? `<p style="color: #2d3748; margin-bottom: 8px;"><strong>${block.title}</strong></p>` : ''}
            ${block.src ? `<p style="color: #4a5568; font-size: 12px; margin-bottom: 8px;">Source: ${block.src}</p>` : ''}
            ${block.caption ? `<p style="color: #4a5568; font-style: italic;">${block.caption}</p>` : ''}
            <p style="color: #a0aec0; font-size: 11px; margin-top: 8px;">
              Note: Images are not included in PDF export. Please refer to the original lesson for visual content.
            </p>
          </div>
        `;
        break;

      default:
        html += `
          <div style="background-color: #f7fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 12px; margin-bottom: 15px;">
            <p style="color: #718096; font-size: 12px;">Content Block (${block.type})</p>
            <p style="color: #4a5568;">${JSON.stringify(block.content || block, null, 2)}</p>
          </div>
        `;
    }

    html += '</div>';
    return html;
  };

  return (
    <Button
      leftIcon={<FiDownload />}
      colorScheme="blue"
      variant="outline"
      onClick={exportToPDF}
      size="sm"
    >
      Export as PDF
    </Button>
  );
};

export default LessonPDFExporter;
